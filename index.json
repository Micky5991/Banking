{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Banking API reference",
    "keywords": "Banking API reference You can find all available types and their documentation in the namespace tree under their namespace. These documentation was generated from XML documentation comments available in your IDE."
  },
  "api/Micky5991.Banking.AggregatedDependencies.AggregatedBankAccountDependencies.html": {
    "href": "api/Micky5991.Banking.AggregatedDependencies.AggregatedBankAccountDependencies.html",
    "title": "Class AggregatedBankAccountDependencies",
    "keywords": "Class AggregatedBankAccountDependencies Container for all BankAccount dependencies. Inheritance System.Object AggregatedBankAccountDependencies Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Banking.AggregatedDependencies Assembly : Micky5991.Banking.dll Syntax [UsedImplicitly] public class AggregatedBankAccountDependencies Constructors | Improve this Doc View Source AggregatedBankAccountDependencies(IBankAccountTransactionRepository) Initializes a new instance of the AggregatedBankAccountDependencies class. Declaration public AggregatedBankAccountDependencies(IBankAccountTransactionRepository transactionRepository) Parameters Type Name Description IBankAccountTransactionRepository transactionRepository Instance of IBankAccountTransactionRepository . Properties | Improve this Doc View Source TransactionRepository Gets the dependency instance of IBankAccountTransactionRepository . Declaration public IBankAccountTransactionRepository TransactionRepository { get; } Property Value Type Description IBankAccountTransactionRepository"
  },
  "api/Micky5991.Banking.AggregatedDependencies.html": {
    "href": "api/Micky5991.Banking.AggregatedDependencies.html",
    "title": "Namespace Micky5991.Banking.AggregatedDependencies",
    "keywords": "Namespace Micky5991.Banking.AggregatedDependencies Classes AggregatedBankAccountDependencies Container for all BankAccount dependencies."
  },
  "api/Micky5991.Banking.Data.BankAccountTransaction.html": {
    "href": "api/Micky5991.Banking.Data.BankAccountTransaction.html",
    "title": "Class BankAccountTransaction",
    "keywords": "Class BankAccountTransaction Representation of a transaction of IBankAccount . Inheritance System.Object BankAccountTransaction Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Banking.Data Assembly : Micky5991.Banking.dll Syntax [PublicAPI] public class BankAccountTransaction Constructors | Improve this Doc View Source BankAccountTransaction(IBankAccount, IBankAccount, Decimal, String) Initializes a new instance of the BankAccountTransaction class. Declaration public BankAccountTransaction(IBankAccount transactionRecipient, IBankAccount transactionOpposite, decimal amount, string reason) Parameters Type Name Description IBankAccount transactionRecipient IBankAccount that was associated with this transaction. IBankAccount transactionOpposite Opposite IBankAccount of this transaction that receives/sent the amount . System.Decimal amount Non-Zero amount which was added to the IBankAccount . This can be negative. System.String reason Message that describes why this BankAccountTransaction has been executed. Exceptions Type Condition System.ArgumentNullException transactionRecipient was null. reason was null, empty or whitespace. System.ArgumentOutOfRangeException amount was 0. Properties | Improve this Doc View Source Amount Gets the amount that was sent to or received from TransactionOpposite . Declaration public decimal Amount { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Reason Gets the message why this transaction was executed. Declaration public string Reason { get; } Property Value Type Description System.String | Improve this Doc View Source TransactionOpposite Gets the opposite IBankAccount that either sent or received Amount . Declaration public IBankAccount TransactionOpposite { get; } Property Value Type Description IBankAccount | Improve this Doc View Source TransactionRecipient Gets the IBankAccount that owns this transaction. Declaration public IBankAccount TransactionRecipient { get; } Property Value Type Description IBankAccount"
  },
  "api/Micky5991.Banking.Data.html": {
    "href": "api/Micky5991.Banking.Data.html",
    "title": "Namespace Micky5991.Banking.Data",
    "keywords": "Namespace Micky5991.Banking.Data Classes BankAccountTransaction Representation of a transaction of IBankAccount ."
  },
  "api/Micky5991.Banking.Entities.BankAccount.html": {
    "href": "api/Micky5991.Banking.Entities.BankAccount.html",
    "title": "Class BankAccount",
    "keywords": "Class BankAccount Instance of an bank account with a balance. Inheritance System.Object BankAccount Implements IBankAccount System.IDisposable System.ComponentModel.INotifyPropertyChanged Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Banking.Entities Assembly : Micky5991.Banking.dll Syntax public class BankAccount : IBankAccount, IDisposable, INotifyPropertyChanged Constructors | Improve this Doc View Source BankAccount(String, Decimal, AggregatedBankAccountDependencies) Initializes a new instance of the BankAccount class. Declaration public BankAccount(string identifier, decimal balance, AggregatedBankAccountDependencies dependencies) Parameters Type Name Description System.String identifier Human readable identifier of this bankaccount. System.Decimal balance Initial balance this BankAccount should have. AggregatedBankAccountDependencies dependencies Instance of the AggregatedBankAccountDependencies this BankAccount needs. Properties | Improve this Doc View Source Balance Gets the current balance of this IBankAccount . Declaration public decimal Balance { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Identifier Gets the human readable and display identifier of this IBankAccount . Declaration public string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnPropertyChanged(String) Invocator for the interface System.ComponentModel.INotifyPropertyChanged . Declaration [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Name of the property that has been changed. | Improve this Doc View Source TryDeposit(Decimal, String, IBankAccount) Deposits (increases Balance ) the given amount to this IBankAccount . If sender is null, this amount will be voided. The parameter sender is only an informative value and should be used for persistance (e.g. BankAccountTransaction to remember to opposite side. Declaration public bool TryDeposit(decimal amount, string reason, IBankAccount sender = null) Parameters Type Name Description System.Decimal amount Value that should be added to Balance . System.String reason Reason why this value was deposited. IBankAccount sender Reference to the IBankAccount that sent this balance. Returns Type Description System.Boolean true if transaction was accepted, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException amount is 0 or lower. System.ArgumentNullException reason is null, empty or whitespace. | Improve this Doc View Source TryTransfer(IBankAccount, Decimal, String) Transfers the given amount from this account to targetAccount . Declaration public bool TryTransfer(IBankAccount targetAccount, decimal amount, string reason) Parameters Type Name Description IBankAccount targetAccount IBankAccount that should receive the amount . System.Decimal amount Value which should be withdrawn from this account and deposited to targetAccount . System.String reason Reason why this amount was transferred. Returns Type Description System.Boolean true of the transfer was successful. Exceptions Type Condition System.ArgumentNullException targetAccount or reason is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source TryTransfer(IBankAccount, Decimal, String, String) Transfers the given amount from this account to targetAccount . Declaration public bool TryTransfer(IBankAccount targetAccount, decimal amount, string reasonOnSourceAccount, string reasonOnTargetAccount) Parameters Type Name Description IBankAccount targetAccount IBankAccount that should receive the amount . System.Decimal amount Value which should be withdrawn from this account and deposited to targetAccount . System.String reasonOnSourceAccount Reason why this transaction was executed that will appear in the transaction history of this IBankAccount . System.String reasonOnTargetAccount Reason why this transaction was executed that will appear in the transaction history of targetAccount . Returns Type Description System.Boolean true of the transfer was successful. Exceptions Type Condition System.ArgumentNullException targetAccount , reasonOnSourceAccount or reasonOnTargetAccount is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source TryWithdraw(Decimal, String, IBankAccount) Withdraws (reduces Balance ) the given amount from this IBankAccount . If receiver is null, this amount will be voided. The parameter receiver is only an informative value and should be used for persistance (e.g. BankAccountTransaction to remember to opposite side. Declaration public bool TryWithdraw(decimal amount, string reason, IBankAccount receiver = null) Parameters Type Name Description System.Decimal amount Value that should be subtracted from Balance . System.String reason Reason why this value was withdrawn. IBankAccount receiver Reference to the IBankAccount that receives the balance. Returns Type Description System.Boolean true if transaction was accepted, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException amount is 0 or lower. System.ArgumentNullException reason is null, empty or whitespace. Events | Improve this Doc View Source Disposed Event that will be invoked when this instance has been disposed. Declaration public event EventHandler Disposed Event Type Type Description System.EventHandler | Improve this Doc View Source PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements IBankAccount System.IDisposable System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Micky5991.Banking.Entities.html": {
    "href": "api/Micky5991.Banking.Entities.html",
    "title": "Namespace Micky5991.Banking.Entities",
    "keywords": "Namespace Micky5991.Banking.Entities Classes BankAccount Instance of an bank account with a balance."
  },
  "api/Micky5991.Banking.Extensions.BankingDependencyInjectionExtensions.html": {
    "href": "api/Micky5991.Banking.Extensions.BankingDependencyInjectionExtensions.html",
    "title": "Class BankingDependencyInjectionExtensions",
    "keywords": "Class BankingDependencyInjectionExtensions Provides extensions for Microsoft.Extensions.DependencyInjection.IServiceCollection to simplify registrations. Inheritance System.Object BankingDependencyInjectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Banking.Extensions Assembly : Micky5991.Banking.dll Syntax public static class BankingDependencyInjectionExtensions Methods | Improve this Doc View Source AddDefaultAggregatedBankingDependencies(IServiceCollection) Registes the default aggregated banking service dependencies. Declaration public static IServiceCollection AddDefaultAggregatedBankingDependencies(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection of services in which these services should be registered to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Passed service in serviceCollection . Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultBankAccountFactory(IServiceCollection) Registers the default implementation for IBankAccountFactory . Declaration public static IServiceCollection AddDefaultBankAccountFactory(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection of services in which these services should be registered to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Passed service in serviceCollection . Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultBankingDependencies(IServiceCollection) Registers all default banking services. Declaration public static IServiceCollection AddDefaultBankingDependencies(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection of services in which these services should be registered to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Passed service in serviceCollection . Exceptions Type Condition System.ArgumentNullException serviceCollection is null."
  },
  "api/Micky5991.Banking.Extensions.html": {
    "href": "api/Micky5991.Banking.Extensions.html",
    "title": "Namespace Micky5991.Banking.Extensions",
    "keywords": "Namespace Micky5991.Banking.Extensions Classes BankingDependencyInjectionExtensions Provides extensions for Microsoft.Extensions.DependencyInjection.IServiceCollection to simplify registrations."
  },
  "api/Micky5991.Banking.Interfaces.html": {
    "href": "api/Micky5991.Banking.Interfaces.html",
    "title": "Namespace Micky5991.Banking.Interfaces",
    "keywords": "Namespace Micky5991.Banking.Interfaces Interfaces IBankAccount Instance of an bank account with a balance. IBankAccountFactory Factory that is responsible to create IBankAccount instances. IBankAccountTransactionRepository Repository that abstracts common actions on a database in the context of BankAccountTransaction ."
  },
  "api/Micky5991.Banking.Interfaces.IBankAccount.html": {
    "href": "api/Micky5991.Banking.Interfaces.IBankAccount.html",
    "title": "Interface IBankAccount",
    "keywords": "Interface IBankAccount Instance of an bank account with a balance. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : Micky5991.Banking.Interfaces Assembly : Micky5991.Banking.dll Syntax [PublicAPI] public interface IBankAccount : IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Balance Gets the current balance of this IBankAccount . Declaration decimal Balance { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Identifier Gets the human readable and display identifier of this IBankAccount . Declaration string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source TryDeposit(Decimal, String, IBankAccount) Deposits (increases Balance ) the given amount to this IBankAccount . If sender is null, this amount will be voided. The parameter sender is only an informative value and should be used for persistance (e.g. BankAccountTransaction to remember to opposite side. Declaration bool TryDeposit(decimal amount, string reason, IBankAccount sender = null) Parameters Type Name Description System.Decimal amount Value that should be added to Balance . System.String reason Reason why this value was deposited. IBankAccount sender Reference to the IBankAccount that sent this balance. Returns Type Description System.Boolean true if transaction was accepted, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException amount is 0 or lower. System.ArgumentNullException reason is null, empty or whitespace. | Improve this Doc View Source TryTransfer(IBankAccount, Decimal, String) Transfers the given amount from this account to targetAccount . Declaration bool TryTransfer(IBankAccount targetAccount, decimal amount, string reason) Parameters Type Name Description IBankAccount targetAccount IBankAccount that should receive the amount . System.Decimal amount Value which should be withdrawn from this account and deposited to targetAccount . System.String reason Reason why this amount was transferred. Returns Type Description System.Boolean true of the transfer was successful. Exceptions Type Condition System.ArgumentNullException targetAccount or reason is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source TryTransfer(IBankAccount, Decimal, String, String) Transfers the given amount from this account to targetAccount . Declaration bool TryTransfer(IBankAccount targetAccount, decimal amount, string reasonOnSourceAccount, string reasonOnTargetAccount) Parameters Type Name Description IBankAccount targetAccount IBankAccount that should receive the amount . System.Decimal amount Value which should be withdrawn from this account and deposited to targetAccount . System.String reasonOnSourceAccount Reason why this transaction was executed that will appear in the transaction history of this IBankAccount . System.String reasonOnTargetAccount Reason why this transaction was executed that will appear in the transaction history of targetAccount . Returns Type Description System.Boolean true of the transfer was successful. Exceptions Type Condition System.ArgumentNullException targetAccount , reasonOnSourceAccount or reasonOnTargetAccount is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source TryWithdraw(Decimal, String, IBankAccount) Withdraws (reduces Balance ) the given amount from this IBankAccount . If receiver is null, this amount will be voided. The parameter receiver is only an informative value and should be used for persistance (e.g. BankAccountTransaction to remember to opposite side. Declaration bool TryWithdraw(decimal amount, string reason, IBankAccount receiver = null) Parameters Type Name Description System.Decimal amount Value that should be subtracted from Balance . System.String reason Reason why this value was withdrawn. IBankAccount receiver Reference to the IBankAccount that receives the balance. Returns Type Description System.Boolean true if transaction was accepted, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException amount is 0 or lower. System.ArgumentNullException reason is null, empty or whitespace. Events | Improve this Doc View Source Disposed Event that will be invoked when this instance has been disposed. Declaration event EventHandler Disposed Event Type Type Description System.EventHandler"
  },
  "api/Micky5991.Banking.Interfaces.IBankAccountFactory.html": {
    "href": "api/Micky5991.Banking.Interfaces.IBankAccountFactory.html",
    "title": "Interface IBankAccountFactory",
    "keywords": "Interface IBankAccountFactory Factory that is responsible to create IBankAccount instances. Namespace : Micky5991.Banking.Interfaces Assembly : Micky5991.Banking.dll Syntax [PublicAPI] public interface IBankAccountFactory Methods | Improve this Doc View Source CreateBankAccount(String, Decimal) Method that creates a new IBankAccount instance with the given parameters. Declaration IBankAccount CreateBankAccount(string identifier, decimal balance) Parameters Type Name Description System.String identifier Human readable identifier of this IBankAccount . System.Decimal balance Current balance this account has. Returns Type Description IBankAccount Newly created instance of IBankAccount . Exceptions Type Condition System.ArgumentNullException identifier is null, empty or whitespace."
  },
  "api/Micky5991.Banking.Interfaces.IBankAccountTransactionRepository.html": {
    "href": "api/Micky5991.Banking.Interfaces.IBankAccountTransactionRepository.html",
    "title": "Interface IBankAccountTransactionRepository",
    "keywords": "Interface IBankAccountTransactionRepository Repository that abstracts common actions on a database in the context of BankAccountTransaction . Namespace : Micky5991.Banking.Interfaces Assembly : Micky5991.Banking.dll Syntax [PublicAPI] public interface IBankAccountTransactionRepository Methods | Improve this Doc View Source CreateTransaction(IBankAccount, IBankAccount, Decimal, String) Logs a transaction that should be assigned to transactionReceipient and remembers the transactionOpposite IBankAccount . Because the transactions are persisted in a double-entry ledger the transactionReceipient can be either the sender of this amount and the receiver. Declaration void CreateTransaction(IBankAccount transactionReceipient, IBankAccount transactionOpposite, decimal amount, string reason) Parameters Type Name Description IBankAccount transactionReceipient Reference to the IBankAccount that should this transaction be assigned to. IBankAccount transactionOpposite Nullable reference to the opposite side of this transaction. If null, the opposite site cannot be determined. System.Decimal amount Non-zero amount this transaction changed the balance of transactionReceipient and transactionOpposite . System.String reason Message that explained the reason of this transaction of the view of transactionReceipient . Exceptions Type Condition System.ArgumentOutOfRangeException amount is zero. System.ArgumentNullException transactionReceipient is null. reason is null, empty or whitespace."
  },
  "documentation/BankAccount.html": {
    "href": "documentation/BankAccount.html",
    "title": "BankAccount",
    "keywords": "BankAccount"
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "Documentation",
    "keywords": "Documentation The aim of this documentation is to give further information and intentions about certain aspects of this framework. All interfaces, public and protected members are documentated and the IDE of your choice should suggest information regarding the part you are using. Table of contents Installation BankAccount"
  },
  "documentation/Installation.html": {
    "href": "documentation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Requirements The following requirements and libraries are needed to use this inventory framework. .NET Standard 2.0 Look into the .NET Standard implementation support table to see which platforms are supported. Microsoft.Extensions.DependencyInjection 3.1 You can also use compatible libraries that implement interfaces of Microsoft.Extensions.DependencyInjection . Recommendation For improved unit-testability and flexibility you should only use provided interfaces of this library. Default setup To setup needed dependencies use the provided extensions on instances that implement IServiceCollection . Setup item-registry In order to create available item-meta definitions, you have to create a class that inherits from Micky5991.Inventory.BaseItemRegistry : using System.Collections.Generic; using Some.Application.Items; using Micky5991.Inventory; using Micky5991.Inventory.Enums; namespace Some.Application { public class ItemRegistry : BaseItemRegistry { protected override IEnumerable<ItemMeta> LoadItemMeta() { // List unique entries which items are available to the inventory system. yield return this.CreateItemMeta<AppleItem>(\"apple\", \"Apple\"); yield return this.CreateItemMeta<WaterItem>(\"water\", \"Water\"); yield return this.CreateItemMeta<DiceItem>(\"dice\", \"Dice\", flags: ItemFlags.NotStackable); } } } Register services If you do not want to create own factories, inventory or strategyhandlers, just use the general extension: /// ... IServiceCollection serviceCollection = new Microsoft.Extensions.DependencyInjection.ServiceCollection(); serviceCollection .AddDefaultInventoryServices() // Add all default services to service container .AddItemTypes(new Some.Application.ItemRegistry()); // Load and setup container for all available items. /// ... Custom setup To setup custom services and provide own ways how the framework reacts, just read about the custom setup ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Banking",
    "keywords": "Banking Micky5991.Banking is a virtual banking framework that runs on top of a central ledger. Getting started To get started with Micky5991.Inventory, look into our guide on how to start using this library. API reference All interfaces and public classes are documented and available under the API Reference . License MIT License Copyright (c) 2020 Francesco Paolocci Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}